import os
import sys
import asyncio
import django
from pathlib import Path
import logging

from decouple import config  # —á–∏—Ç–∞–µ–º .env
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, BufferedInputFile
from aiogram.filters import Command
from asgiref.sync import sync_to_async

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path ---
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(BASE_DIR))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django ---
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

# --- –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π Django ---
from car.models import CarContent, CONDITION_CHOICES, COLOR_CHOICES, BODY_CHOICES, FUEL_CHOICES, PRICE_CHOICES

# --- –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env ---
TOKEN = config("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_choices = {}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(message: types.Message):
    user_choices[message.from_user.id] = {}
    buttons = [[KeyboardButton(text=label)] for _, label in CONDITION_CHOICES]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)


async def handle_choice(message: types.Message):
    try:
        user_id = message.from_user.id
        text = message.text

        if user_id not in user_choices:
            await start(message)
            return

        # --- –®–∞–≥ 1: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
        if text in [label for _, label in CONDITION_CHOICES]:
            for key, label in CONDITION_CHOICES:
                if label == text:
                    user_choices[user_id]["condition"] = key

            buttons = [[KeyboardButton(text=label)] for _, label in COLOR_CHOICES]
            keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=keyboard)
            return

        # --- –®–∞–≥ 2: —Ü–≤–µ—Ç ---
        if text in [label for _, label in COLOR_CHOICES]:
            for key, label in COLOR_CHOICES:
                if label == text:
                    user_choices[user_id]["color"] = key

            buttons = [[KeyboardButton(text=label)] for _, label in BODY_CHOICES]
            keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–∑–æ–≤:", reply_markup=keyboard)
            return

        # --- –®–∞–≥ 3: –∫—É–∑–æ–≤ ---
        if text in [label for _, label in BODY_CHOICES]:
            for key, label in BODY_CHOICES:
                if label == text:
                    user_choices[user_id]["body_type"] = key

            buttons = [[KeyboardButton(text=label)] for _, label in FUEL_CHOICES]
            keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–ª–∏–≤–æ:", reply_markup=keyboard)
            return

        # --- –®–∞–≥ 4: —Ç–æ–ø–ª–∏–≤–æ ---
        if text in [label for _, label in FUEL_CHOICES]:
            for key, label in FUEL_CHOICES:
                if label == text:
                    user_choices[user_id]["fuel_type"] = key

            buttons = [[KeyboardButton(text=label)] for _, label in PRICE_CHOICES]
            keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:", reply_markup=keyboard)
            return

        # --- –®–∞–≥ 5: —Ü–µ–Ω–∞ ---
        if text in [label for _, label in PRICE_CHOICES]:
            for key, label in PRICE_CHOICES:
                if label == text:
                    user_choices[user_id]["price_range"] = key

            choices = user_choices[user_id]

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Django ORM
            cars = await sync_to_async(list)(
                CarContent.objects.filter(
                    condition=choices["condition"],
                    color=choices["color"],
                    body_type=choices["body_type"],
                    fuel_type=choices["fuel_type"],
                    price_range=choices["price_range"]
                )
            )

            if cars:
                for car in cars:
                    # --- –§–æ—Ç–æ ---
                    photos = []
                    for i in range(1, 6):
                        photo_field = getattr(car, f"photo{i}", None)
                        if photo_field and hasattr(photo_field, 'path') and os.path.exists(photo_field.path):
                            photos.append(photo_field.path)

                    if photos:
                        if len(photos) > 1:
                            media_group = []
                            for photo_path in photos:
                                try:
                                    with open(photo_path, "rb") as f:
                                        media_group.append(
                                            InputMediaPhoto(
                                                media=BufferedInputFile(f.read(), filename=os.path.basename(photo_path))
                                            )
                                        )
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ {photo_path}: {e}")
                            if media_group:
                                await message.answer_media_group(media_group)
                        else:
                            try:
                                with open(photos[0], "rb") as f:
                                    await message.answer_photo(
                                        BufferedInputFile(f.read(), filename=os.path.basename(photos[0]))
                                    )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

                    # --- –í–∏–¥–µ–æ ---
                    if car.video and hasattr(car.video, 'path') and os.path.exists(car.video.path):
                        try:
                            with open(car.video.path, "rb") as f:
                                await message.answer_video(
                                    BufferedInputFile(f.read(), filename=os.path.basename(car.video.path))
                                )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
                            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")

                    # --- –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---
                    text_info = (
                        f"üöò {car.title}\n\n"
                        f"{car.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                        f"üí∞ –¶–µ–Ω–∞: {car.get_price_range_display()}\n"
                        f"‚öôÔ∏è –ö—É–∑–æ–≤: {car.get_body_type_display()}\n"
                        f"üé® –¶–≤–µ—Ç: {car.get_color_display()}\n"
                        f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car.get_fuel_type_display()}\n"
                        f"üìå –°–æ—Å—Ç–æ—è–Ω–∏–µ: {car.get_condition_display()}\n"
                        f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {car.user}"
                    )
                    await message.answer(text_info)
            else:
                await message.answer("üöò –ú–∞—à–∏–Ω —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∫–∞ –Ω–µ—Ç.")

            # –ß–∏—Å—Ç–∏–º –≤—ã–±–æ—Ä –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            user_choices.pop(user_id, None)
            await message.answer("üîé –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
                                 reply_markup=types.ReplyKeyboardRemove())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")


# --- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
def register_user_handlers(dp: Dispatcher):
    dp.message.register(start, Command(commands=["start"]))
    dp.message.register(handle_choice)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    register_user_handlers(dp)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Ctrl+C)")
